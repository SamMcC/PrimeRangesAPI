/*
 * This source file was generated by the Gradle 'init' task
 */
package com.mccormack;

import com.mccormack.model.ErrorResponse;
import com.mccormack.model.PrimeResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.test.context.ActiveProfiles;

import java.util.stream.Stream;

import static com.mccormack.config.Endpoints.PRIMES_ENDPOINT;
import static org.assertj.core.api.Assertions.assertThat;


@SpringBootTest(webEnvironment=SpringBootTest.WebEnvironment.RANDOM_PORT)
@ActiveProfiles("it")
class PrimeRangesAPIIntegrationTest {

    @Autowired
    private TestRestTemplate testRestTemplate;

    @Test
    void get_shouldReturnValidResponse_whenCalledWithPositiveInteger() {
        PrimeResponse response = testRestTemplate.getForEntity(PRIMES_ENDPOINT + "/10", PrimeResponse.class).getBody();
        assertThat(response).isNotNull();
        assertThat(response.getInitial()).isEqualTo(10L);
        assertThat(response.getPrimes()).containsExactly( 2L, 3L, 5L, 7L);
    }

    @ParameterizedTest
    @MethodSource("invalidPathParameterProvider")
    void get_shouldReturnErrorResponse_whenCalledWithInvalidOrNullPathParameter(Object input, String error) {
        ErrorResponse response = testRestTemplate.getForEntity(PRIMES_ENDPOINT + "/" + input, ErrorResponse.class).getBody();
        assertThat(response).isNotNull();
        assertThat(response.getErrorMessage()).isEqualTo(error);
    }

    private static Stream<Arguments> invalidPathParameterProvider() {
        return Stream.<Arguments>builder()
                .add(Arguments.of(-1L, "Invalid input, value must be a positive integer"))
                .add(Arguments.of(null, "Invalid input, value must be a positive integer"))
                .add(Arguments.of("foo", "Invalid input, value must be a positive integer"))
                .build();
    }
}
